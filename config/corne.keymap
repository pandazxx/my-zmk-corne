/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>



/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <600>;
            global-quick-tap;
            quick-tap-ms = <400>;
        };
    };

    /* = < 0  1  2  3  4  5  6  7  8  9 10 11> */
    /* , <12 13 14 15 16 17 18 19 20 21 22 23> */
    /* , <24 25 26 27 28 29 30 31 32 33 34 35> */
    /* , <         36 37 38 39 40 41         >; */
    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 3>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 31>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 6>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
/* ,&kp GRAVE    ,&kp Q          ,&kp W          ,&kp E      ,&kp R          ,&kp T          ,&kp Y  ,&kp U          ,&kp I&      ,&kp O          ,&kp P              ,&kp BSPC  */
/* ,&hm LCTRL ESC,&hm LEFT_GUI A ,&hm LEFT_ALT S ,&hm LCTRL D,&hm LEFT_SHIFT F,&kp G         ,&kp H  ,&hm RSHIFT J   ,&hm RCTRL K,&hm RIGHT_ALT L,&hm RGUI SEMICOLON ,&kp SQT  */
/* ,&kp LSHFT    ,&kp Z          ,&kp X          ,&kp C      ,&kp V          ,&kp B          ,&kp N  ,&kp M          ,&kp COMMA  ,&kp DOT        ,&kp FSLH           ,&kp ENTER  */
/*                                              ,&kp TAB    ,&lt 1 SPACE    ,&lt 2 ESC      ,&lt 3 ESC,&ltq 2 SPACE     ,&kp BSPC */

&kp GRAVE	&kp Q	&kp W	&kp E	&kp R	&kp T		&kp Y	&kp U	&kp I&	&kp O	&kp P	&kp BSPC
&hm LCTRL ESC	&hm LEFT_SHIFT A	&hm LEFT_ALT S	&hm LCTRL D	&hm LEFT_GUI F	&kp G		&kp H	&hm RGUI J	&hm RCTRL K	&hm RIGHT_ALT L	&hm RSHIFT SEMICOLON	&kp SQT
&kp LSHFT	&kp Z	&kp X	&kp C	&kp V	&kp B		&kp N	&kp M	&kp COMMA	&kp DOT	&kp FSLH	&kp ENTER
			&kp TAB	&lt 1 SPACE	&lt 2 ESC		&lt 3 ESC	&ltq 2 SPACE	&kp BSPC			
            >;
        };

        lower_layer {
            bindings = <
/* ,&kp GRAVE         ,&kp N1  ,&kp N2        ,&kp N3       ,&kp N4         ,&kp N5         ,&kp N6     ,&kp N7           ,&kp N8       ,&kp N9         ,&kp N0     ,&kp MINUS */
/* ,&trans            ,&trans  ,&hm LALT LEFT ,&hm LCTRL UP ,&hm LSHFT DOWN ,&kp RIGHT      ,&kp LEFT   ,&hm RSHIFT DOWN  ,&hm RCTRL UP ,&hm RALT RIGHT ,&kp SLASH  ,&kp EQUAL */
/* ,&trans            ,&trans  ,&trans        ,&trans       ,&trans         ,&trans         ,&kp C_PREV ,&kp C_VOL_DN     ,&kp C_VOL_UP ,&kp C_NEXT     ,&trans     ,&kp C_PP */
/*                                         ,&trans       ,&trans         ,&trans         ,&trans     ,&kp RIGHT_SHIFT  ,&trans */
&kp GRAVE	&kp N1	&kp N2	&kp N3	&kp N4	&kp N5		&kp N6	&kp N7	&kp N8	&kp N9	&kp MINUS	&kp EQUAL
&trans	&trans	&hm LALT LEFT	&hm LCTRL UP	&hm LSHFT DOWN	&kp RIGHT		&kp LEFT	&hm RSHIFT DOWN	&hm RCTRL UP	&hm RALT RIGHT	&kp FSLH	&kp BSLH
&trans	&kp LG(Z)	&kp LG(X)	&kp LG(C)	&kp LG(V)	&kp LC(B)		&kp LS(LBRC)	&kp LS(RBKT)	&kp LBRC	&kp RBKT	&kp LS(COMMA)	&kp LS(DOT)
			&trans	&trans	&trans		&kp LS(N9)	&kp N0	&kp LS(N0)			
            >;
        };

        raise_layer {
            bindings = <
,&kp GRAVE         ,&kp F1  ,&kp F2        ,&kp F3       ,&kp F4          ,&kp F5         ,&kp F6     ,&kp F7           ,&kp F8       ,&kp F9         ,&kp F10    ,&kp F11
,&trans            ,&trans  ,&hm LALT LEFT ,&hm LCTRL UP ,&hm LSHFT DOWN  ,&kp RIGHT      ,&kp LEFT   ,&hm RSHIFT DOWN  ,&hm RCTRL UP ,&hm RALT RIGHT ,&kp SLASH  ,&kp EQUAL
,&trans            ,&trans  ,&trans        ,&trans       ,&rgb_ug RGB_TOG ,&trans         ,&kp C_PREV ,&kp C_VOL_DN     ,&kp C_VOL_UP ,&kp C_NEXT     ,&trans     ,&kp C_PP
                                        ,&trans       ,&trans          ,&trans         ,&trans     ,&kp RIGHT_SHIFT  ,&trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR    &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans        &trans  &trans  &trans
            >;
        };
        extra1 {
            status = "reserved";
        };
        extra2 {
            status = "reserved";
        };
        extra3 {
            status = "reserved";
        };
        extra4 {
            status = "reserved";
        };

    };
};

